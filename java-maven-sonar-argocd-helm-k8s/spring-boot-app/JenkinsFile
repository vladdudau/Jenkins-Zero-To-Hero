pipeline {
  agent any
  stages {
    stage('Checkout') {
      steps {
        sh 'echo passed'
        //git branch: 'main', url: 'https://github.com/iam-veeramalla/Jenkins-Zero-To-Hero.git'
      }
    }
    stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }
    stage('Static Code Analysis') {
      environment {
        SONAR_URL = "http://54.195.23.1:9000"
      }
      steps {
        withCredentials([string(credentialsId: 'sonarqube', variable: 'SONAR_AUTH_TOKEN')]) {
          sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn sonar:sonar -Dsonar.login=$SONAR_AUTH_TOKEN -Dsonar.host.url=${SONAR_URL}'
        }
      }
    }
    stage('Build and Push Docker Image') {
      environment {
        DOCKER_IMAGE = "vladdudau0403/ultimate-cicd:${BUILD_NUMBER}"
        // DOCKERFILE_LOCATION = "java-maven-sonar-argocd-helm-k8s/spring-boot-app/Dockerfile"
        REGISTRY_CREDENTIALS = credentials('docker-cred')
      }
      steps {
        script {
            sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && docker build -t ${DOCKER_IMAGE} .'
            def dockerImage = docker.image("${DOCKER_IMAGE}")
            docker.withRegistry('https://index.docker.io/v1/', "docker-cred") {
                dockerImage.push()
            }
        }
      }
    }
    stage('Update Deployment File') {
        environment {
            GIT_REPO_NAME = "Jenkins-Zero-To-Hero"
            GIT_USER_NAME = "vladdudau"
        }
        steps {
            withCredentials([string(credentialsId: 'github', variable: 'GITHUB_TOKEN')]) {
         sh '''
    git checkout main
    git pull origin main
    git config user.email "dudau.vlad@gmail.com"
    git config user.name "Vlad Dudau"

    FILE=java-maven-sonar-argocd-helm-k8s/spring-boot-app-manifests/deployment.yml

    # Extragem tag-ul curent (numărul de după ultima ":")
    CURRENT_TAG=$(grep "vladdudau0403/ultimate-cicd:" $FILE | sed 's/.*://')
    
    if [ -z "$CURRENT_TAG" ]; then
      CURRENT_TAG=0
    fi

    # Incrementăm
    NEW_TAG=$((CURRENT_TAG + 1))

    echo "Current tag: $CURRENT_TAG, New tag: $NEW_TAG"

    # Înlocuim în fișier indiferent de valoarea curentă
    sed -i "s#vladdudau0403/ultimate-cicd:${CURRENT_TAG}#vladdudau0403/ultimate-cicd:${NEW_TAG}#g" $FILE

    git add $FILE
    git commit -m "Update deployment image to version ${NEW_TAG}" || echo "No changes to commit"
    git push https://${GITHUB_TOKEN}@github.com/${GIT_USER_NAME}/${GIT_REPO_NAME} main
'''



            }
        }
    }
  }
}
